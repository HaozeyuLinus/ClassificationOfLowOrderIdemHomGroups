clear;clc
% define symbol
symbols = ['a', 'b' , 'c', 'd'];
symbols1 = ['b' , 'd'];
symbols2 = ['a', 'c'];

% initialization result
result = {}; 
aa=symbols(1);
bb=symbols(1);
ab=symbols(2);
ba=symbols(2);
ac=symbols(1);
ca=symbols(1);
ad=symbols(2);
da=symbols(2);
aN=symbols(1);
bN=symbols(2);

for cd=symbols1
    for dc=symbols1
        for cc=symbols2
            for dd = symbols2
                for cb=symbols1
                    for bc=symbols1
                        for db=symbols2
                            for bd=symbols2
                                for cN=symbols2
                                    for dN=symbols1
                                     % check whether the conditions are met
                                       if strcmp(eval(['b' bc]),eval([bb 'a'])) && ...
                                          strcmp(eval(['b' bd]),eval([bb 'b'])) && ...
                                          strcmp(eval(['b' cb]),eval([bc 'b'])) && ...
                                          strcmp(eval(['b' cc]),eval([bc 'a'])) && ...
                                          strcmp(eval(['b' cd]),eval([bc 'b'])) && ...
                                          strcmp(eval(['b' db]),eval([bd 'b'])) && ...
                                          strcmp(eval(['b' dc]),eval([bd 'a'])) && ...
                                          strcmp(eval(['b' dd]),eval([bd 'b'])) && ...
                                          strcmp(eval(['a' bb]),eval([cb 'b'])) && ...
                                          strcmp(eval(['a' bc]),eval([cb 'a'])) && ...
                                          strcmp(eval(['a' bd]),eval([cb 'b'])) && ...
                                          strcmp(eval(['a' cb]),eval([cc 'b'])) && ...
                                          strcmp(eval(['a' cc]),eval([cc 'a'])) && ...
                                          strcmp(eval(['a' cd]),eval([cc 'b'])) && ...
                                          strcmp(eval(['a' db]),eval([cd 'b'])) && ...
                                          strcmp(eval(['a' dc]),eval([cd 'a'])) && ...
                                          strcmp(eval(['a' dd]),eval([cd 'b'])) && ...
                                          strcmp(eval(['b' bb]),eval([db 'b'])) && ...
                                          strcmp(eval(['b' bc]),eval([db 'a'])) && ...
                                          strcmp(eval(['b' bd]),eval([db 'b'])) && ...
                                          strcmp(eval(['b' cb]),eval([dc 'b'])) && ...
                                          strcmp(eval(['b' cc]),eval([dc 'a'])) && ...
                                          strcmp(eval(['b' cd]),eval([dc 'b'])) && ...
                                          strcmp(eval(['b' db]),eval([dd 'b'])) && ...
                                          strcmp(eval(['b' dc]),eval([dd 'a'])) && ...
                                          strcmp(eval(['b' dd]),eval([dd 'b'])) && ...
                                          strcmp(eval([bc 'N']),eval([cN bN])) && ...
                                          strcmp(eval([bd 'N']),eval([dN bN])) && ...
                                          strcmp(eval([cb 'N']),eval([bN cN])) && ...
                                          strcmp(eval([cc 'N']),eval([cN cN])) && ...
                                          strcmp(eval([cd 'N']),eval([dN cN])) && ...
                                          strcmp(eval([db 'N']),eval([bN dN])) && ...
                                          strcmp(eval([dc 'N']),eval([cN dN])) && ...
                                          strcmp(eval([dd 'N']),eval([dN dN]))
                            
                                           result{end+1} = struct('cd', cd, 'dc', dc, 'cc', cc, ...
                                                           'dd', dd , 'cb' , cb, 'bc' , bc, ...
                                                           'db', db, 'bd', bd, 'cN', cN, 'dN', dN );
                                      end
                                   end
                                end
                            end 
                        end
                    end
                end
            end
        end  
    end
end



